package com.phoenixdarts.toss.backend.domain;

import static com.phoenixdarts.toss.backend.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class TeamAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAllPropertiesEquals(Team expected, Team actual) {
        assertTeamAutoGeneratedPropertiesEquals(expected, actual);
        assertTeamAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAllUpdatablePropertiesEquals(Team expected, Team actual) {
        assertTeamUpdatableFieldsEquals(expected, actual);
        assertTeamUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAutoGeneratedPropertiesEquals(Team expected, Team actual) {
        assertThat(expected)
            .as("Verify Team auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamUpdatableFieldsEquals(Team expected, Team actual) {
        assertThat(expected)
            .as("Verify Team relevant properties")
            .satisfies(e -> assertThat(e.getTeamNo()).as("check teamNo").isEqualTo(actual.getTeamNo()))
            .satisfies(e -> assertThat(e.getApprovalStatus()).as("check approvalStatus").isEqualTo(actual.getApprovalStatus()))
            .satisfies(
                e ->
                    assertThat(e.getEntryDate())
                        .as("check entryDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getEntryDate())
            )
            .satisfies(e -> assertThat(e.getMemo()).as("check memo").isEqualTo(actual.getMemo()))
            .satisfies(e -> assertThat(e.getGroupNo()).as("check groupNo").isEqualTo(actual.getGroupNo()))
            .satisfies(e -> assertThat(e.getGroupSeq()).as("check groupSeq").isEqualTo(actual.getGroupSeq()))
            .satisfies(e -> assertThat(e.getSeedNo()).as("check seedNo").isEqualTo(actual.getSeedNo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamUpdatableRelationshipsEquals(Team expected, Team actual) {
        assertThat(expected)
            .as("Verify Team relationships")
            .satisfies(e -> assertThat(e.getCaptain()).as("check captain").isEqualTo(actual.getCaptain()))
            .satisfies(e -> assertThat(e.getTteam()).as("check tteam").isEqualTo(actual.getTteam()))
            .satisfies(e -> assertThat(e.getAffiliatedInfo()).as("check affiliatedInfo").isEqualTo(actual.getAffiliatedInfo()))
            .satisfies(e -> assertThat(e.getPaymentInfo()).as("check paymentInfo").isEqualTo(actual.getPaymentInfo()))
            .satisfies(e -> assertThat(e.getDivision()).as("check division").isEqualTo(actual.getDivision()));
    }
}
