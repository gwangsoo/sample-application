package com.phoenixdarts.toss.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentInfoAllPropertiesEquals(PaymentInfo expected, PaymentInfo actual) {
        assertPaymentInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentInfoAllUpdatablePropertiesEquals(PaymentInfo expected, PaymentInfo actual) {
        assertPaymentInfoUpdatableFieldsEquals(expected, actual);
        assertPaymentInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentInfoAutoGeneratedPropertiesEquals(PaymentInfo expected, PaymentInfo actual) {
        assertThat(expected)
            .as("Verify PaymentInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentInfoUpdatableFieldsEquals(PaymentInfo expected, PaymentInfo actual) {
        assertThat(expected)
            .as("Verify PaymentInfo relevant properties")
            .satisfies(e -> assertThat(e.getOrderNumber()).as("check orderNumber").isEqualTo(actual.getOrderNumber()))
            .satisfies(
                e -> assertThat(e.getPaymentCompletedDate()).as("check paymentCompletedDate").isEqualTo(actual.getPaymentCompletedDate())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getPaymentMethodType()).as("check paymentMethodType").isEqualTo(actual.getPaymentMethodType()))
            .satisfies(e -> assertThat(e.getPgTID()).as("check pgTID").isEqualTo(actual.getPgTID()))
            .satisfies(e -> assertThat(e.getPgStatus()).as("check pgStatus").isEqualTo(actual.getPgStatus()))
            .satisfies(e -> assertThat(e.getPgDetail()).as("check pgDetail").isEqualTo(actual.getPgDetail()))
            .satisfies(e -> assertThat(e.getPayer()).as("check payer").isEqualTo(actual.getPayer()))
            .satisfies(e -> assertThat(e.getPayerPhone()).as("check payerPhone").isEqualTo(actual.getPayerPhone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentInfoUpdatableRelationshipsEquals(PaymentInfo expected, PaymentInfo actual) {}
}
