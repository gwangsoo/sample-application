package com.phoenixdarts.toss.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MatchAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchAllPropertiesEquals(Match expected, Match actual) {
        assertMatchAutoGeneratedPropertiesEquals(expected, actual);
        assertMatchAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchAllUpdatablePropertiesEquals(Match expected, Match actual) {
        assertMatchUpdatableFieldsEquals(expected, actual);
        assertMatchUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchAutoGeneratedPropertiesEquals(Match expected, Match actual) {
        assertThat(expected)
            .as("Verify Match auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchUpdatableFieldsEquals(Match expected, Match actual) {
        assertThat(expected)
            .as("Verify Match relevant properties")
            .satisfies(e -> assertThat(e.getMatchNo()).as("check matchNo").isEqualTo(actual.getMatchNo()))
            .satisfies(e -> assertThat(e.getMatchType()).as("check matchType").isEqualTo(actual.getMatchType()))
            .satisfies(e -> assertThat(e.getGroupNo()).as("check groupNo").isEqualTo(actual.getGroupNo()))
            .satisfies(e -> assertThat(e.getGroupMatchSeq()).as("check groupMatchSeq").isEqualTo(actual.getGroupMatchSeq()))
            .satisfies(e -> assertThat(e.getRoundNum()).as("check roundNum").isEqualTo(actual.getRoundNum()))
            .satisfies(e -> assertThat(e.getMatchStatus()).as("check matchStatus").isEqualTo(actual.getMatchStatus()))
            .satisfies(e -> assertThat(e.getNextMatchNo()).as("check nextMatchNo").isEqualTo(actual.getNextMatchNo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchUpdatableRelationshipsEquals(Match expected, Match actual) {
        assertThat(expected)
            .as("Verify Match relationships")
            .satisfies(e -> assertThat(e.getHome()).as("check home").isEqualTo(actual.getHome()))
            .satisfies(e -> assertThat(e.getAway()).as("check away").isEqualTo(actual.getAway()))
            .satisfies(e -> assertThat(e.getTmatch()).as("check tmatch").isEqualTo(actual.getTmatch()))
            .satisfies(e -> assertThat(e.getDivision()).as("check division").isEqualTo(actual.getDivision()));
    }
}
