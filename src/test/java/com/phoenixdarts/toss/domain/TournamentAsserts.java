package com.phoenixdarts.toss.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TournamentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAllPropertiesEquals(Tournament expected, Tournament actual) {
        assertTournamentAutoGeneratedPropertiesEquals(expected, actual);
        assertTournamentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAllUpdatablePropertiesEquals(Tournament expected, Tournament actual) {
        assertTournamentUpdatableFieldsEquals(expected, actual);
        assertTournamentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAutoGeneratedPropertiesEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentUpdatableFieldsEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament relevant properties")
            .satisfies(e -> assertThat(e.getSeq()).as("check seq").isEqualTo(actual.getSeq()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDay()).as("check day").isEqualTo(actual.getDay()))
            .satisfies(e -> assertThat(e.getEventTournament()).as("check eventTournament").isEqualTo(actual.getEventTournament()))
            .satisfies(e -> assertThat(e.getEntryClose()).as("check entryClose").isEqualTo(actual.getEntryClose()))
            .satisfies(e -> assertThat(e.getEntryApprovalType()).as("check entryApprovalType").isEqualTo(actual.getEntryApprovalType()))
            .satisfies(e -> assertThat(e.getTournamentType()).as("check tournamentType").isEqualTo(actual.getTournamentType()))
            .satisfies(e -> assertThat(e.getSeedingRule()).as("check seedingRule").isEqualTo(actual.getSeedingRule()))
            .satisfies(e -> assertThat(e.getTournamentPlayMode()).as("check tournamentPlayMode").isEqualTo(actual.getTournamentPlayMode()))
            .satisfies(e -> assertThat(e.getThirdPlaceDecision()).as("check thirdPlaceDecision").isEqualTo(actual.getThirdPlaceDecision()))
            .satisfies(e -> assertThat(e.getDivisionRule()).as("check divisionRule").isEqualTo(actual.getDivisionRule()))
            .satisfies(e -> assertThat(e.getEntryLimit()).as("check entryLimit").isEqualTo(actual.getEntryLimit()))
            .satisfies(e -> assertThat(e.getNumOfEntry()).as("check numOfEntry").isEqualTo(actual.getNumOfEntry()))
            .satisfies(
                e -> assertThat(e.getDivisionAssignMethod()).as("check divisionAssignMethod").isEqualTo(actual.getDivisionAssignMethod())
            )
            .satisfies(e -> assertThat(e.getEntryGenderType()).as("check entryGenderType").isEqualTo(actual.getEntryGenderType()))
            .satisfies(e -> assertThat(e.getHandicap()).as("check handicap").isEqualTo(actual.getHandicap()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentUpdatableRelationshipsEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament relationships")
            .satisfies(e -> assertThat(e.getEntryFee()).as("check entryFee").isEqualTo(actual.getEntryFee()))
            .satisfies(e -> assertThat(e.getCompetition()).as("check competition").isEqualTo(actual.getCompetition()));
    }
}
