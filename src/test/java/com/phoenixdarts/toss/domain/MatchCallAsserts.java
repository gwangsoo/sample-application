package com.phoenixdarts.toss.backend.domain;

import static com.phoenixdarts.toss.backend.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MatchCallAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchCallAllPropertiesEquals(MatchCall expected, MatchCall actual) {
        assertMatchCallAutoGeneratedPropertiesEquals(expected, actual);
        assertMatchCallAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchCallAllUpdatablePropertiesEquals(MatchCall expected, MatchCall actual) {
        assertMatchCallUpdatableFieldsEquals(expected, actual);
        assertMatchCallUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchCallAutoGeneratedPropertiesEquals(MatchCall expected, MatchCall actual) {
        assertThat(expected)
            .as("Verify MatchCall auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchCallUpdatableFieldsEquals(MatchCall expected, MatchCall actual) {
        assertThat(expected)
            .as("Verify MatchCall relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getCallDateTime())
                        .as("check callDateTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCallDateTime())
            )
            .satisfies(e -> assertThat(e.getCallMessage()).as("check callMessage").isEqualTo(actual.getCallMessage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchCallUpdatableRelationshipsEquals(MatchCall expected, MatchCall actual) {
        assertThat(expected)
            .as("Verify MatchCall relationships")
            .satisfies(e -> assertThat(e.getMatchTeam()).as("check matchTeam").isEqualTo(actual.getMatchTeam()));
    }
}
