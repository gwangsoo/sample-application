package com.phoenixdarts.toss.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MatchTeamAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchTeamAllPropertiesEquals(MatchTeam expected, MatchTeam actual) {
        assertMatchTeamAutoGeneratedPropertiesEquals(expected, actual);
        assertMatchTeamAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchTeamAllUpdatablePropertiesEquals(MatchTeam expected, MatchTeam actual) {
        assertMatchTeamUpdatableFieldsEquals(expected, actual);
        assertMatchTeamUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchTeamAutoGeneratedPropertiesEquals(MatchTeam expected, MatchTeam actual) {
        assertThat(expected)
            .as("Verify MatchTeam auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchTeamUpdatableFieldsEquals(MatchTeam expected, MatchTeam actual) {
        assertThat(expected)
            .as("Verify MatchTeam relevant properties")
            .satisfies(e -> assertThat(e.getIsWinner()).as("check isWinner").isEqualTo(actual.getIsWinner()))
            .satisfies(e -> assertThat(e.getAvgPpd()).as("check avgPpd").isEqualTo(actual.getAvgPpd()))
            .satisfies(e -> assertThat(e.getAvgMpr()).as("check avgMpr").isEqualTo(actual.getAvgMpr()))
            .satisfies(e -> assertThat(e.getWinSet()).as("check winSet").isEqualTo(actual.getWinSet()))
            .satisfies(e -> assertThat(e.getWinLeg()).as("check winLeg").isEqualTo(actual.getWinLeg()))
            .satisfies(e -> assertThat(e.getPlayerCallModeType()).as("check playerCallModeType").isEqualTo(actual.getPlayerCallModeType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchTeamUpdatableRelationshipsEquals(MatchTeam expected, MatchTeam actual) {
        assertThat(expected)
            .as("Verify MatchTeam relationships")
            .satisfies(e -> assertThat(e.getTeam()).as("check team").isEqualTo(actual.getTeam()));
    }
}
