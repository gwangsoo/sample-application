package com.phoenixdarts.toss.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RewardDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardDetailAllPropertiesEquals(RewardDetail expected, RewardDetail actual) {
        assertRewardDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertRewardDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardDetailAllUpdatablePropertiesEquals(RewardDetail expected, RewardDetail actual) {
        assertRewardDetailUpdatableFieldsEquals(expected, actual);
        assertRewardDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardDetailAutoGeneratedPropertiesEquals(RewardDetail expected, RewardDetail actual) {
        assertThat(expected)
            .as("Verify RewardDetail auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardDetailUpdatableFieldsEquals(RewardDetail expected, RewardDetail actual) {
        assertThat(expected)
            .as("Verify RewardDetail relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getTournamentId()).as("check tournamentId").isEqualTo(actual.getTournamentId()))
            .satisfies(e -> assertThat(e.getDivisionId()).as("check divisionId").isEqualTo(actual.getDivisionId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRewardDetailUpdatableRelationshipsEquals(RewardDetail expected, RewardDetail actual) {
        assertThat(expected)
            .as("Verify RewardDetail relationships")
            .satisfies(e -> assertThat(e.getReward()).as("check reward").isEqualTo(actual.getReward()));
    }
}
