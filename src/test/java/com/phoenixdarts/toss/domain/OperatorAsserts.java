package com.phoenixdarts.toss.backend.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OperatorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAllPropertiesEquals(Operator expected, Operator actual) {
        assertOperatorAutoGeneratedPropertiesEquals(expected, actual);
        assertOperatorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAllUpdatablePropertiesEquals(Operator expected, Operator actual) {
        assertOperatorUpdatableFieldsEquals(expected, actual);
        assertOperatorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorAutoGeneratedPropertiesEquals(Operator expected, Operator actual) {
        assertThat(expected)
            .as("Verify Operator auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorUpdatableFieldsEquals(Operator expected, Operator actual) {
        assertThat(expected)
            .as("Verify Operator relevant properties")
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getUserName()).as("check userName").isEqualTo(actual.getUserName()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getApprovalStatus()).as("check approvalStatus").isEqualTo(actual.getApprovalStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOperatorUpdatableRelationshipsEquals(Operator expected, Operator actual) {
        assertThat(expected)
            .as("Verify Operator relationships")
            .satisfies(e -> assertThat(e.getOperatorRole()).as("check operatorRole").isEqualTo(actual.getOperatorRole()))
            .satisfies(e -> assertThat(e.getRegion()).as("check region").isEqualTo(actual.getRegion()));
    }
}
