package com.phoenixdarts.toss.domain;

import static com.phoenixdarts.toss.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MatchAttendanceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchAttendanceAllPropertiesEquals(MatchAttendance expected, MatchAttendance actual) {
        assertMatchAttendanceAutoGeneratedPropertiesEquals(expected, actual);
        assertMatchAttendanceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchAttendanceAllUpdatablePropertiesEquals(MatchAttendance expected, MatchAttendance actual) {
        assertMatchAttendanceUpdatableFieldsEquals(expected, actual);
        assertMatchAttendanceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchAttendanceAutoGeneratedPropertiesEquals(MatchAttendance expected, MatchAttendance actual) {
        assertThat(expected)
            .as("Verify MatchAttendance auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchAttendanceUpdatableFieldsEquals(MatchAttendance expected, MatchAttendance actual) {
        assertThat(expected)
            .as("Verify MatchAttendance relevant properties")
            .satisfies(
                e -> assertThat(e.getAttendanceStatusType()).as("check attendanceStatusType").isEqualTo(actual.getAttendanceStatusType())
            )
            .satisfies(
                e ->
                    assertThat(e.getAttendanceDateTime())
                        .as("check attendanceDateTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getAttendanceDateTime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMatchAttendanceUpdatableRelationshipsEquals(MatchAttendance expected, MatchAttendance actual) {
        assertThat(expected)
            .as("Verify MatchAttendance relationships")
            .satisfies(e -> assertThat(e.getEntry()).as("check entry").isEqualTo(actual.getEntry()))
            .satisfies(e -> assertThat(e.getMatchTeam()).as("check matchTeam").isEqualTo(actual.getMatchTeam()));
    }
}
