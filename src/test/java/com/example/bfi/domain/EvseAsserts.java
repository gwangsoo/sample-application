package com.example.bfi.domain;

import static com.example.bfi.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class EvseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvseAllPropertiesEquals(Evse expected, Evse actual) {
        assertEvseAutoGeneratedPropertiesEquals(expected, actual);
        assertEvseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvseAllUpdatablePropertiesEquals(Evse expected, Evse actual) {
        assertEvseUpdatableFieldsEquals(expected, actual);
        assertEvseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvseAutoGeneratedPropertiesEquals(Evse expected, Evse actual) {
        assertThat(expected)
            .as("Verify Evse auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvseUpdatableFieldsEquals(Evse expected, Evse actual) {
        assertThat(expected)
            .as("Verify Evse relevant properties")
            .satisfies(e -> assertThat(e.getUid()).as("check uid").isEqualTo(actual.getUid()))
            .satisfies(e -> assertThat(e.getEvseId()).as("check evseId").isEqualTo(actual.getEvseId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getDirections()).as("check directions").isEqualTo(actual.getDirections()))
            .satisfies(
                e ->
                    assertThat(e.getLastUpdated())
                        .as("check lastUpdated")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getLastUpdated())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEvseUpdatableRelationshipsEquals(Evse expected, Evse actual) {
        assertThat(expected)
            .as("Verify Evse relationships")
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()));
    }
}
